import numpy as np
import matplotlib.pyplot as plt

def estimate_coef(x,y):
  #no. of points
  n=np.size(x)
 #mean of x and y vector
  m_x=np.mean(x)
  m_y=np.mean(y)
  #calculating cross deviation and deviation about x
  SS_xy=np.sum(y*x)-n*m_y*m_x
  SS_xx=np.sum(x*x)-n*m_x*m_x
  #calculating regression coefficients
  b_1=SS_xy/SS_xx
  b_0=m_y-b-1*m_x
  return(b_0,b_1)
  
  def plot_regression_line(x,y,b):
#plotting actual points as scatter plot
 plt.scatter(x,y,color="m",marker="o",s=30)
#predicted response vector
y_pred=b[0]+b[1]*x
#plottig the regression line
plt.plot(x,y_pred,color="g")
#putting lables
plt.xlabel('x')
plt.ylabel('y')
	# function to show plot
plt.show()
def main():
	# observations / data
 x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
 y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])
# estimating coefficients
b = estimate_coef(x, y)
print("Estimated coefficients:\nb_0 = {} \\nb_1 = {}".format(b[0], b[1]))
# plotting regression line
plot_regression_line(x, y, b)
if __name__ == "__main__":
 main()
 
 SHOW HYPO ACCEPT OR REJECT
 # Importing the required libraries  
from scipy.stats import ttest_ind  
import numpy as np  
  
# Creating the data groups  
data_group1 = np.array([0,1,2,3,4,5,6,7,8,9])  
data_group2 = np.array([1,3,2,5,7,8,8,9,10,12])  
  
# Calculating the mean of the two data groups  
mean1 = np.mean(data_group1)  
mean2 = np.mean(data_group2)   
# Print mean values  
print("Data group 1 mean value:", mean1)  
print("Data group 2 mean value:", mean2)   
# Calculating standard deviation  
std1 = np.std(data_group1)  
std2 = np.std(data_group2)    
# Printing standard deviation values  
print("Data group 1 std value:", std1)  
print("Data group 2 std value:", std2)  
  
# Implementing the t-test  
t_test,p_val = ttest_ind(data_group1, data_group2)  
print("The P-value is: ", p_val)  
  
# taking the threshold value as 0.05 or 5%  
if p_val < 0.05:      
    print("We can reject the null hypothesis")  
else:  
    print("We can accept the null hypothesis")  
